{% comment %} /snippets/bundle-delivery-info.liquid {% endcomment %}
{% comment %} Bundle delivery info - completely separate from existing delivery-info.liquid {% endcomment %}

{% comment %} Check for Shopify's official bundle structure {% endcomment %}
{% assign component_refs = product.selected_or_first_available_variant.metafields.custom.component_reference %}
{% assign is_bundle_title = false %}
{% if product.title contains 'Bundle' or product.title contains 'bundle' %}
  {% assign is_bundle_title = true %}
{% endif %}

{% if component_refs != blank or is_bundle_title %}

<script>
console.log("=== BUNDLE COMPONENTS ===");
console.log("Bundle Name:", "{{ product.title }}");

{% assign bundle_data = product.selected_or_first_available_variant.metafields.simple_bundles.bundled_variants %}
{% if bundle_data %}
  console.log("Bundle Components Found:");
  {% for component in bundle_data %}
    {% assign component_handle = component.product_title | handleize %}
    {% assign component_product = all_products[component_handle] %}
    console.log("- Product: {{ component.product_title }}");
    console.log("  Handle: {{ component_handle }}");
    console.log("  Quantity: {{ component.quantity_in_bundle }}");
    {% if component_product %}
      console.log("  Found Product: {{ component_product.title }}");
      console.log("  Delivery Time: {{ component_product.metafields.delivery.delivery_time }}");
      console.log("  Estimated Date: {{ component_product.metafields.delivery.estimated_date }}");
    {% else %}
      console.log("  ERROR: Product not found!");
    {% endif %}
  {% endfor %}
{% else %}
  console.log("No bundle data found in simple_bundles.bundled_variants");
{% endif %}
</script>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const bundleDeliveryElement = document.getElementById("bundle-delivery-info");
  if (!bundleDeliveryElement) return;

  let bundleDeliveryInfo;
  try {
    bundleDeliveryInfo = JSON.parse(bundleDeliveryElement.textContent);
  } catch (error) {
    return;
  }

  const deliveryInfoElement = document.querySelector(".delivery-info > p");
  if (!deliveryInfoElement) return;

  // Store original content for bundles
  if (typeof window.OriginalBundleEstimateText === "undefined") {
    window.OriginalBundleEstimateText = deliveryInfoElement.innerHTML;
  }

  function updateBundleDeliveryDisplay() {
    const variantInput = document.querySelector('.product__main__content input[name="id"]');
    if (!variantInput) return;

    const variantId = parseInt(variantInput.value, 10);
    const variantData = bundleDeliveryInfo.variants.find(variant => variant.id === variantId);
    
    if (variantData && variantData.has_bundle_data && variantData.component_delivery_info) {
      let bundleHTML = "<strong>Estimated delivery</strong><br>";
      
      variantData.component_delivery_info.forEach(component => {
        const deliveryText = component.estimated_date || component.delivery_time;
        if (deliveryText) {
          const quantityText = component.quantity > 1 ? ` (${component.quantity}x)` : '';
          bundleHTML += `<strong>${component.product_title}${quantityText}:</strong> ${deliveryText}<br>`;
        }
      });
      
      deliveryInfoElement.innerHTML = bundleHTML;
    } else {
      deliveryInfoElement.innerHTML = window.OriginalBundleEstimateText;
    }
  }

  function updateBundleHiddenInputs() {
    const variantInput = document.querySelector('.product__main__content input[name="id"]');
    if (!variantInput) return;

    const variantId = parseInt(variantInput.value, 10);
    const variantData = bundleDeliveryInfo.variants.find(variant => variant.id === variantId);
    
    // Clear existing bundle inputs
    const existingBundleInputs = document.querySelectorAll('input[name^="bundle_delivery_"]');
    existingBundleInputs.forEach(input => input.remove());

    if (variantData && variantData.has_bundle_data && variantData.component_delivery_info) {
      const form = document.querySelector('.product__main__content form');
      
      variantData.component_delivery_info.forEach((component, index) => {
        const deliveryText = component.estimated_date || component.delivery_time;
        if (deliveryText) {
          const quantityText = component.quantity > 1 ? ` (${component.quantity}x)` : '';
          const hiddenInput = document.createElement('input');
          hiddenInput.type = 'hidden';
          hiddenInput.name = `bundle_delivery_${index}`;
          hiddenInput.value = `${component.product_title}${quantityText}|${deliveryText}`;
          form.appendChild(hiddenInput);
        }
      });
    }
  }

  // Initial updates
  updateBundleDeliveryDisplay();
  updateBundleHiddenInputs();

  // Update on variant change
  const variantInput = document.querySelector('.product__main__content input[name="id"]');
  if (variantInput) {
    variantInput.addEventListener("change", () => {
      updateBundleDeliveryDisplay();
      updateBundleHiddenInputs();
    });
  }
});
</script>

{% endif %} 