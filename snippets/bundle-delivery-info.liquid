{% comment %} /snippets/bundle-delivery-info.liquid {% endcomment %}

{% comment %} Bundle delivery info display for product page {% endcomment %}

{% assign is_bundle = product.metafields.custom.bundle_components != blank %}

{% if is_bundle %}
  <div class="product__block__icon bundle-delivery-info text-left" style="--PB: 8px;" data-bundle-delivery-container>
    <div class="icon-holder" style="--ICON-SIZE: 42px; --ICON-STROKE-COLOR: #4b4b4b;">
      {% render 'image',
        img_object: '/files/Group_29613095.svg',
        alt: 'Delivery',
        sizes: '42px',
        loading: 'lazy'
      %}
    </div>
    
    <div class="bundle-delivery-content">
      <p><strong>ESTIMATED DELIVERY:</strong></p>
      <ul class="bundle-delivery-list" data-bundle-delivery-list>
        {% comment %} Bundle components will be populated by JavaScript {% endcomment %}
        <li data-bundle-loading>Loading bundle delivery information...</li>
      </ul>
      
      {% comment %} Store bundle metafield data for JavaScript {% endcomment %}
      <script type="application/json" data-bundle-metafield>{{ product.metafields.custom.bundle_components | json }}</script>
      
      {% comment %} Store all products data for JavaScript access {% endcomment %}
      <script type="application/json" data-all-products>
        {
          {% for product_item in collections.all.products limit: 1000 %}
            "{{ product_item.handle }}": {
              "title": {{ product_item.title | json }},
              "delivery_time": {{ product_item.metafields.delivery.delivery_time | json }},
              "estimated_date": {{ product_item.metafields.delivery.estimated_date | json }},
              "variants": [
                {% for variant in product_item.variants %}
                  {
                    "id": {{ variant.id }},
                    "title": {{ variant.title | json }},
                    "delivery_time": {{ variant.metafields.delivery.delivery_time | json }},
                    "estimated_date": {{ variant.metafields.delivery.estimated_date | json }}
                  }{% unless forloop.last %},{% endunless %}
                {% endfor %}
              ]
            }{% unless forloop.last %},{% endunless %}
          {% endfor %}
        }
      </script>
    </div>
  </div>

  {% comment %} JavaScript for handling bundle delivery info display {% endcomment %}
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const bundleDeliveryList = document.querySelector('[data-bundle-delivery-list]');
      const bundleMetafieldScript = document.querySelector('[data-bundle-metafield]');
      const allProductsScript = document.querySelector('[data-all-products]');
      
      if (bundleDeliveryList && bundleMetafieldScript && allProductsScript) {
        try {
          // Parse bundle metafield data
          const bundleData = JSON.parse(bundleMetafieldScript.textContent);
          const allProducts = JSON.parse(allProductsScript.textContent);
          
          // Clear loading message
          bundleDeliveryList.innerHTML = '';
          
          // Process each bundle component
          bundleData.forEach(function(component) {
            const productHandle = component.product_title.toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '');
            const product = allProducts[productHandle];
            
            if (product) {
              // Apply hierarchy: Component Variant > Component Product > Bundle Product
              let deliveryValue = '';
              let deliveryType = '';
              
              // Check if we have variant-specific delivery info
              if (component.variant_title && component.variant_title !== 'Default Title') {
                const variant = product.variants.find(v => v.title === component.variant_title);
                if (variant) {
                  if (variant.delivery_time) {
                    deliveryValue = variant.delivery_time;
                    deliveryType = 'delivery time';
                  } else if (variant.estimated_date) {
                    deliveryValue = variant.estimated_date;
                    deliveryType = 'estimated date';
                  }
                }
              }
              
              // Fallback to product-level delivery info
              if (!deliveryValue) {
                if (product.delivery_time) {
                  deliveryValue = product.delivery_time;
                  deliveryType = 'delivery time';
                } else if (product.estimated_date) {
                  deliveryValue = product.estimated_date;
                  deliveryType = 'estimated date';
                }
              }
              
              // Create and append list item
              if (deliveryValue) {
                const li = document.createElement('li');
                li.innerHTML = '<strong>' + product.title + ':</strong> ' + deliveryValue;
                bundleDeliveryList.appendChild(li);
              }
            }
          });
          
          // Update cart delivery input if it exists
          const cartDeliveryInput = document.querySelector('[data-bundle-delivery-target]');
          if (cartDeliveryInput) {
            const deliveryStrings = [];
            bundleDeliveryList.querySelectorAll('li').forEach(function(li) {
              deliveryStrings.push(li.textContent.replace(':', ''));
            });
            cartDeliveryInput.value = deliveryStrings.join(', ');
          }
          
        } catch (error) {
          console.error('Error parsing bundle delivery data:', error);
          bundleDeliveryList.innerHTML = '<li>Error loading bundle delivery information</li>';
        }
      }
    });
  </script>

{% endif %} 