<!-- Anti-flicker styles -->
<style>
  [data-gb-gate] {
    visibility: hidden;
    transition: visibility 0.2s ease-in-out;
  }
  .gb-ready [data-gb-gate] {
    visibility: visible;
  }
  .gb-timeout [data-gb-gate] {
    visibility: visible;
  }
</style>

<script>
(function() {
  'use strict';
  
  // ============================================
  // CONFIGURATION FROM METAFIELD
  // ============================================
  
  // Get SDK key from metafield - Shopify will replace this with the actual value
  const SDK_KEY = '{{ shop.metafields.growthbook.sdk_key }}';
  
  // Validate SDK key exists
  if (!SDK_KEY || SDK_KEY === '' || SDK_KEY.includes('{' + '{')) {
    console.error('[GB Loader] No SDK key found in metafield growthbook.sdk_key');
    return;
  }
  
  console.log('[GB Loader] Initializing with SDK key:', SDK_KEY);
  
  // ============================================
  // STABLE USER ID SETUP
  // ============================================
  
  // Get or create stable user ID (shared with pixel)
  const USER_ID_KEY = 'gb_anonymous_id';
  let stableUserId = localStorage.getItem(USER_ID_KEY);
  
  if (!stableUserId) {
    stableUserId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    localStorage.setItem(USER_ID_KEY, stableUserId);
    console.log('[GB Loader] Created new stable user ID:', stableUserId);
  } else {
    console.log('[GB Loader] Using existing stable user ID:', stableUserId);
  }
  
  // Also store as gb_stable_user_id for backward compatibility
  localStorage.setItem('gb_stable_user_id', stableUserId);
  
  // Store globally for debugging
  window.GB_STABLE_USER_ID = stableUserId;
  window.GB_SDK_KEY = SDK_KEY;
  
  // ============================================
  // LOAD EXTERNAL SCRIPT FROM VERCEL
  // ============================================
  
  // Configure the main script URL
  // Update this URL to your Vercel deployment
  const SCRIPT_URL = 'https://your-project.vercel.app/growthbook-bundle.js';
  
  // Optional: Add version or cache busting
  const VERSION = '1.0.0'; // Update this when you deploy new versions
  const scriptSrc = `${SCRIPT_URL}?v=${VERSION}&shop=${window.Shopify?.shop || window.location.hostname}`;
  
  // Create and inject the script
  const script = document.createElement('script');
  script.async = true;
  script.src = scriptSrc;
  script.dataset.sdkKey = SDK_KEY;
  script.dataset.stableUserId = stableUserId;
  
  // Add error handling
  script.onerror = function() {
    console.error('[GB Loader] Failed to load GrowthBook script from:', scriptSrc);
    // Optionally dispatch an event for the pixel to know GB failed
    document.dispatchEvent(new CustomEvent('gb:load:failed'));
  };
  
  script.onload = function() {
    console.log('[GB Loader] GrowthBook script loaded successfully');
  };
  
  // Inject configuration into window before script loads
  window.growthbook_config = {
    apiHost: "https://cdn.growthbook.io",
    clientKey: SDK_KEY,
    enableDevMode: /[?&]debug=1(&|$)/.test(location.search),
    
    attributes: {
      id: stableUserId,
      
      // Shopify attributes
      customerId: window.ShopifyAnalytics?.meta?.page?.customerId || null,
      pageType: window.ShopifyAnalytics?.meta?.page?.pageType || 'unknown',
      
      // Device detection  
      deviceType: /Mobile|Android|iPhone|iPad/i.test(navigator.userAgent) ? 'mobile' : 'desktop',
      browser: (function() {
        const ua = navigator.userAgent;
        if (ua.includes('Chrome') && !ua.includes('Edge')) return 'chrome';
        if (ua.includes('Safari') && !ua.includes('Chrome')) return 'safari';  
        if (ua.includes('Firefox')) return 'firefox';
        if (ua.includes('Edge')) return 'edge';
        return 'other';
      })(),
      
      // Page attributes
      url: location.href,
      path: location.pathname,
      domain: location.hostname
    },
    
    trackingCallback: function(experiment, result) {
      const debug = /[?&]debug=1(&|$)/.test(location.search);
      if (debug) {
        console.log('[GB] Experiment viewed:', experiment.key, {
          variation: result.variationId,
          bucket: result.experimentResult?.bucket
        });
      }
      
      // Analytics tracking
      if (window.dataLayer) {
        window.dataLayer.push({
          event: 'gb_experiment_viewed',
          experimentId: experiment.key,
          variationId: result.variationId
        });
      }
    }
  };
  
  // Preview configuration
  window.GB_PREVIEW_CONFIG = {
    enabled: true,
    patterns: [/^EXP\d+$/, /^exp_\w+$/, /^test_\w+$/],
    overrides: new Map()
  };
  
  // Initialize empty test assignments
  window.gbTestAssignments = {};
  
  // Load the script
  document.head.appendChild(script);
  
  // ============================================
  // DEBUG UTILITIES (Keep these locally)
  // ============================================
  
  window.gbDebug = function() {
    const gb = window.gb || window._growthbook;
    
    console.group('üî¨ GrowthBook Debug');
    console.log('SDK Key:', SDK_KEY);
    console.log('Stable ID:', window.GB_STABLE_USER_ID);
    console.log('Current ID:', gb?.getAttributes()?.id);
    console.log('Match:', gb?.getAttributes()?.id === window.GB_STABLE_USER_ID ? '‚úÖ' : '‚ùå');
    console.log('Script URL:', scriptSrc);
    console.log('Config:', window.growthbook_config);
    
    if (window.GB_EXECUTION?.evaluations) {
      console.log('Evaluations:', window.GB_EXECUTION.evaluations);
    }
    
    console.log('Analytics Assignments:', window.gbTestAssignments);
    console.groupEnd();
    
    return {
      sdkKey: SDK_KEY,
      stableId: window.GB_STABLE_USER_ID,
      currentId: gb?.getAttributes()?.id,
      scriptUrl: scriptSrc,
      evaluations: window.GB_EXECUTION?.evaluations,
      analyticsAssignments: window.gbTestAssignments
    };
  };
  
  // Additional debug helpers
  window.gbTestBucket = function(experimentId) {
    const gb = window.gb || window._growthbook;
    const key = experimentId.startsWith('exp-') ? experimentId : `exp-${experimentId}`;
    const result = gb?.evalFeature(key);
    
    console.log(`${experimentId}:`, {
      included: result?.experimentResult?.inExperiment,
      variation: result?.experimentResult?.variationId,  
      bucket: result?.experimentResult?.bucket
    });
    
    return result?.experimentResult?.bucket;
  };
  
  window.gbAnalyze = function(experimentId) {
    console.log('Use gbDebug() for basic info.');
    console.log('Full analysis available after script loads from Vercel.');
  };
  
  window.gbPixelStatus = function() {
    console.group('üìä Pixel Integration Status');
    console.log('SDK Key:', SDK_KEY ? 'Set' : 'Missing');
    console.log('Test Assignments Available:', window.gbTestAssignments ? 'YES' : 'NO');
    
    if (window.gbTestAssignments) {
      const count = Object.keys(window.gbTestAssignments).length;
      console.log(`Reporting ${count} A/B test${count !== 1 ? 's' : ''} to analytics`);
    }
    
    console.log('User ID for Analytics:', localStorage.getItem('gb_anonymous_id') || 'Not set');
    console.log('Session ID:', sessionStorage.getItem('gb_session_id') || 'Not set');
    console.groupEnd();
  };
  
})();
</script>
