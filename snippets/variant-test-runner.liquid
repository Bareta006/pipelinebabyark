<!-- GrowthBook + Shopify Integration with Stable User ID -->
<!-- Place this in your theme.liquid or a snippet file -->

<!-- Anti-flicker styles -->
<style>
  [data-gb-gate] {
    visibility: hidden;
    transition: visibility 0.2s ease-in-out;
  }
  .gb-ready [data-gb-gate] {
    visibility: visible;
  }
  .gb-timeout [data-gb-gate] {
    visibility: visible;
  }
</style>

<script>
// ============================================
// PART 1: STABLE USER ID (Must run first!)
// ============================================
(function() {
  // Create or get stable user ID from localStorage
  const STORAGE_KEY = 'gb_stable_user_id';
  let stableUserId = localStorage.getItem(STORAGE_KEY);
  
  if (!stableUserId) {
    stableUserId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    localStorage.setItem(STORAGE_KEY, stableUserId);
    console.log('[GB] Created new stable user ID:', stableUserId);
  } else {
    console.log('[GB] Using existing stable user ID:', stableUserId);
  }
  
  // Store globally for access throughout the page
  window.GB_STABLE_USER_ID = stableUserId;
  
  // Pre-configure GrowthBook with our stable ID
  window.growthbook_config = {
    apiHost: "https://cdn.growthbook.io",
    clientKey: "sdk-Knbwv55oDrfYDuq",
    enableDevMode: /[?&]debug=1(&|$)/.test(location.search), // Enable with ?debug=1 in URL
    
    // Set initial attributes with our stable ID
    attributes: {
      id: stableUserId, // Critical: Our stable ID
      
      // Shopify-specific attributes
      customerId: window.ShopifyAnalytics?.meta?.page?.customerId || null,
      pageType: window.ShopifyAnalytics?.meta?.page?.pageType || 'unknown',
      
      // Device detection
      deviceType: /Mobile|Android|iPhone|iPad/i.test(navigator.userAgent) ? 'mobile' : 'desktop',
      browser: (function() {
        const ua = navigator.userAgent;
        if (ua.includes('Chrome')) return 'chrome';
        if (ua.includes('Safari') && !ua.includes('Chrome')) return 'safari';
        if (ua.includes('Firefox')) return 'firefox';
        if (ua.includes('Edge')) return 'edge';
        return 'other';
      })(),
      
      // Page attributes
      url: location.href,
      path: location.pathname,
      domain: location.hostname
    },
    
    // Experiment tracking
    trackingCallback: function(experiment, result) {
      // Google Analytics 4
      if (window.dataLayer) {
        window.dataLayer.push({
          event: "gb_experiment_viewed",
          experimentId: experiment.key,
          variationId: result.variationId
        });
      }
      
      // Shopify Analytics
      if (window.Shopify?.analytics?.track) {
        window.Shopify.analytics.track('Experiment Viewed', {
          experimentId: experiment.key,
          variationId: result.variationId
        });
      }
    }
  };
})();
</script>

<!-- Load GrowthBook Auto-Bundle -->
<script async src="https://cdn.jsdelivr.net/npm/@growthbook/growthbook/dist/bundles/auto.min.js" 
        data-api-host="https://cdn.growthbook.io" 
        data-client-key="sdk-Knbwv55oDrfYDuq">
</script>

<script>
// ============================================
// PART 2: ENFORCE STABLE ID & HANDLE EXPERIMENTS
// ============================================
(function() {
  // Queue callback for when GrowthBook is ready
  window.growthbook_queue = window.growthbook_queue || [];
  
  window.growthbook_queue.push(function(gb) {
    console.log('[GB] GrowthBook initialized');
    
    // CRITICAL: Force our stable ID (override any auto-generated ID)
    const currentId = gb.getAttributes()?.id;
    if (currentId !== window.GB_STABLE_USER_ID) {
      console.warn('[GB] Correcting ID from', currentId, 'to', window.GB_STABLE_USER_ID);
      gb.setAttributes({
        ...gb.getAttributes(),
        id: window.GB_STABLE_USER_ID
      });
    }
    
    // Execute experiment JavaScript code
    function executeExperiments() {
      const features = gb.getFeatures();
      const experiments = Object.keys(features).filter(k => k.startsWith('exp-'));
      
      console.log('[GB] Found', experiments.length, 'experiments to evaluate');
      
      experiments.forEach(function(key) {
        const result = gb.evalFeature(key);
        const experimentId = key.replace('exp-', '');
        
        // Log evaluation details
        if (result?.experimentResult) {
          console.log('[GB] Experiment', experimentId, ':', {
            included: result.experimentResult.inExperiment,
            variation: result.experimentResult.variationId,
            bucket: result.experimentResult.bucket
          });
        }
        
        if (result?.value && typeof result.value === 'string' && result.value.trim()) {
          try {
            // Execute the experiment's JavaScript
            new Function(result.value)();
            console.log('[GB] ‚úÖ Executed JavaScript for:', experimentId);
          } catch (error) {
            console.error('[GB] ‚ùå Failed to execute JavaScript for:', experimentId, error);
          }
        }
      });
      
      // Mark page as ready
      document.documentElement.classList.add('gb-ready');
      console.log('[GB] All experiments evaluated');
    }
    
    // Wait for features to load, then execute
    if (gb.ready) {
      // Features already loaded
      executeExperiments();
    } else {
      // Wait for features to load
      gb.loadFeatures().then(function() {
        console.log('[GB] Features loaded');
        executeExperiments();
      }).catch(function(error) {
        console.error('[GB] Failed to load features:', error);
      });
    }
    
    // Re-run experiments when Shopify sections reload (for theme editor)
    document.addEventListener('shopify:section:load', executeExperiments);
    
    // Safe attribute updater that preserves the stable ID
    function safeUpdateAttributes(newAttrs) {
      const current = gb.getAttributes();
      gb.setAttributes({
        ...current,
        ...newAttrs,
        id: window.GB_STABLE_USER_ID // Always preserve our stable ID
      });
    }
    
    // Handle Shopify cart events
    document.addEventListener('cart:updated', function() {
      safeUpdateAttributes({
        cartUpdated: Date.now(),
        cartItemCount: window.Shopify?.cart?.item_count || 0
      });
    });
    
    document.addEventListener('product:added', function() {
      safeUpdateAttributes({
        lastProductAdded: Date.now()
      });
    });
    
    // Monitor for ID drift and auto-correct (runs every 5 seconds)
    setInterval(function() {
      const currentId = gb.getAttributes()?.id;
      if (currentId !== window.GB_STABLE_USER_ID) {
        console.error('[GB] ID drift detected! Correcting...');
        gb.setAttributes({
          ...gb.getAttributes(),
          id: window.GB_STABLE_USER_ID
        });
      }
    }, 5000);
    
    // Store reference for debugging
    window.gb = gb;
  });
  
  // Timeout fallback - show content if GrowthBook fails to load
  setTimeout(function() {
    if (!document.documentElement.classList.contains('gb-ready')) {
      document.documentElement.classList.add('gb-timeout');
      console.warn('[GB] Timeout reached, showing content');
    }
  }, 3000);
})();

// ============================================
// PART 3: DEBUG UTILITIES (Remove in production)
// ============================================
window.gbDebug = function() {
  const gb = window.gb || window.growthbook || window._growthbook;
  if (!gb) {
    console.log('GrowthBook not loaded');
    return null;
  }
  
  const stableId = localStorage.getItem('gb_stable_user_id');
  const currentId = gb.getAttributes()?.id;
  
  console.group('üî¨ GrowthBook Debug Info');
  console.log('Stable ID (localStorage):', stableId);
  console.log('Current ID (GrowthBook):', currentId);
  console.log('IDs Match:', currentId === stableId ? '‚úÖ YES' : '‚ùå NO');
  
  // Test specific experiments
  const exp1 = gb.evalFeature('exp-EXP880921');
  const exp2 = gb.evalFeature('exp-EXP880657');
  
  console.log('EXP880921 Bucket:', exp1?.experimentResult?.bucket);
  console.log('EXP880657 Bucket:', exp2?.experimentResult?.bucket);
  console.log('All Attributes:', gb.getAttributes());
  console.groupEnd();
  
  return {
    stable: stableId,
    current: currentId,
    match: currentId === stableId
  };
};

// Test bucket stability across time
window.gbTestStability = function(seconds = 5) {
  const gb = window.gb || window.growthbook || window._growthbook;
  if (!gb) {
    console.log('GrowthBook not loaded');
    return;
  }
  
  console.log(`Testing bucket stability for ${seconds} seconds...`);
  const results = [];
  
  const interval = setInterval(function() {
    const exp = gb.evalFeature('exp-EXP880921');
    const bucket = exp?.experimentResult?.bucket;
    results.push(bucket);
    console.log('Bucket check:', bucket);
  }, 1000);
  
  setTimeout(function() {
    clearInterval(interval);
    const allSame = results.every(b => b === results[0]);
    console.log('Bucket stability:', allSame ? '‚úÖ STABLE' : '‚ùå UNSTABLE');
    console.log('All buckets:', results);
  }, seconds * 1000);
};
</script>