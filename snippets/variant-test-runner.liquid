<!-- GrowthBook Auto-Bundle with Stable ID and Debug Logging -->
<!-- Place this in your theme.liquid file -->

<!-- Anti-flicker styles -->
<style>
  [data-gb-gate] {
    visibility: hidden;
    transition: visibility 0.2s ease-in-out;
  }
  .gb-ready [data-gb-gate] {
    visibility: visible;
  }
  .gb-timeout [data-gb-gate] {
    visibility: visible;
  }
</style>

<script>
// ============================================
// STABLE USER ID & CONFIGURATION
// ============================================
(function() {
  'use strict';
  
  // Get or create stable user ID
  const USER_ID_KEY = 'gb_stable_user_id';
  let stableUserId = localStorage.getItem(USER_ID_KEY);
  
  if (!stableUserId) {
    stableUserId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    localStorage.setItem(USER_ID_KEY, stableUserId);
    console.log('[GB] Created new stable user ID:', stableUserId);
  } else {
    console.log('[GB] Using existing stable user ID:', stableUserId);
  }
  
  // Store globally for debugging
  window.GB_STABLE_USER_ID = stableUserId;
  
  // Pre-configure GrowthBook with stable ID
  window.growthbook_config = {
    apiHost: "https://cdn.growthbook.io",
    clientKey: "sdk-Knbwv55oDrfYDuq",
    enableDevMode: /[?&]debug=1(&|$)/.test(location.search),
    
    attributes: {
      id: stableUserId, // Our stable ID
      
      // Shopify attributes
      customerId: window.ShopifyAnalytics?.meta?.page?.customerId || null,
      pageType: window.ShopifyAnalytics?.meta?.page?.pageType || 'unknown',
      
      // Device detection  
      deviceType: /Mobile|Android|iPhone|iPad/i.test(navigator.userAgent) ? 'mobile' : 'desktop',
      browser: (function() {
        const ua = navigator.userAgent;
        if (ua.includes('Chrome') && !ua.includes('Edge')) return 'chrome';
        if (ua.includes('Safari') && !ua.includes('Chrome')) return 'safari';  
        if (ua.includes('Firefox')) return 'firefox';
        if (ua.includes('Edge')) return 'edge';
        return 'other';
      })(),
      
      // Page attributes
      url: location.href,
      path: location.pathname,
      domain: location.hostname
    },
    
    trackingCallback: function(experiment, result) {
      const debug = /[?&]debug=1(&|$)/.test(location.search);
      if (debug) {
        console.log('[GB] Experiment viewed:', experiment.key, {
          variation: result.variationId,
          bucket: result.experimentResult?.bucket
        });
      }
      
      // Analytics tracking
      if (window.dataLayer) {
        window.dataLayer.push({
          event: 'gb_experiment_viewed',
          experimentId: experiment.key,
          variationId: result.variationId
        });
      }
    }
  };
})();

// Load GrowthBook auto-bundle
(function() {
  const script = document.createElement('script');
  script.async = true;
  script.src = 'https://cdn.jsdelivr.net/npm/@growthbook/growthbook/dist/bundles/auto.min.js';
  script.dataset.apiHost = 'https://cdn.growthbook.io';
  script.dataset.clientKey = 'sdk-Knbwv55oDrfYDuq';
  document.head.appendChild(script);
})();

// ============================================  
// EXPERIMENT HANDLER
// ============================================
(function() {
  const DEBUG = /[?&]debug=1(&|$)/.test(location.search);
  
  // Track execution state
  window.GB_EXECUTION = {
    ready: false,
    executed: new Set(),
    evaluations: {}
  };
  
  // Wait for GrowthBook and execute experiments
  window.growthbook_queue = window.growthbook_queue || [];
  window.growthbook_queue.push(async function(gb) {
    console.log('[GB] Auto-bundle initialized');
    
    // Verify our stable ID is being used
    const currentId = gb.getAttributes()?.id;
    if (currentId !== window.GB_STABLE_USER_ID) {
      console.warn('[GB] Fixing ID from', currentId, 'to', window.GB_STABLE_USER_ID);
      gb.setAttributes({
        ...gb.getAttributes(),
        id: window.GB_STABLE_USER_ID
      });
    }
    
    // Function to execute experiments
    async function executeExperiments() {
      // Ensure features are loaded
      if (!gb.ready) {
        console.log('[GB] Waiting for features...');
        await gb.loadFeatures();
      }
      
      const features = gb.getFeatures();
      const experiments = Object.keys(features).filter(k => k.startsWith('exp-'));
      
      console.log('[GB] Processing', experiments.length, 'experiments');
      
      let executedCount = 0;
      let includedCount = 0;
      
      experiments.forEach(key => {
        const experimentId = key.replace('exp-', '');
        const result = gb.evalFeature(key);
        
        // Store evaluation details
        window.GB_EXECUTION.evaluations[experimentId] = {
          included: result?.experimentResult?.inExperiment || false,
          variation: result?.experimentResult?.variationId,
          bucket: result?.experimentResult?.bucket,
          value: result?.value
        };
        
        // Log if included
        if (result?.experimentResult?.inExperiment) {
          includedCount++;
          if (DEBUG) {
            console.log(`[GB] ${experimentId} INCLUDED:`, {
              variation: result.experimentResult.variationId,
              bucket: result.experimentResult.bucket?.toFixed(4)
            });
          }
        }
        
        // Execute JavaScript if present
        if (result?.value && typeof result.value === 'string' && result.value.trim()) {
          // Skip if already executed
          if (window.GB_EXECUTION.executed.has(experimentId)) {
            if (DEBUG) console.log(`[GB] ${experimentId} already executed, skipping`);
            return;
          }
          
          try {
            new Function(result.value)();
            window.GB_EXECUTION.executed.add(experimentId);
            executedCount++;
            
            if (DEBUG) {
              console.log(`[GB] ‚úÖ Executed ${experimentId} (variant ${result.experimentResult?.variationId})`);
            }
          } catch (error) {
            console.error(`[GB] Failed to execute ${experimentId}:`, error.message);
          }
        }
      });
      
      console.log(`[GB] Complete: ${includedCount} included, ${executedCount} executed`);
      window.GB_EXECUTION.ready = true;
      document.documentElement.classList.add('gb-ready');
    }
    
    // Execute on load
    await executeExperiments();
    
    // Re-execute on Shopify section changes
    document.addEventListener('shopify:section:load', function() {
      console.log('[GB] Section reload detected');
      window.GB_EXECUTION.executed.clear(); // Allow re-execution
      executeExperiments();
    });
    
    // Safe attribute updates for cart events  
    function updateAttributes(newAttrs) {
      gb.setAttributes({
        ...gb.getAttributes(),
        ...newAttrs,
        id: window.GB_STABLE_USER_ID // Never change ID
      });
    }
    
    document.addEventListener('cart:updated', function() {
      updateAttributes({
        cartUpdated: Date.now(),
        cartItemCount: window.Shopify?.cart?.item_count || 0
      });
    });
    
    // Monitor ID stability
    setInterval(function() {
      const currentId = gb.getAttributes()?.id;
      if (currentId !== window.GB_STABLE_USER_ID) {
        console.error('[GB] ID drift detected! Fixing...');
        gb.setAttributes({
          ...gb.getAttributes(),
          id: window.GB_STABLE_USER_ID
        });
      }
    }, 5000);
    
    // Store reference
    window.gb = gb;
  });
})();

// ============================================
// DEBUG UTILITIES  
// ============================================
window.gbDebug = function() {
  const gb = window.gb || window._growthbook;
  
  console.group('üî¨ GrowthBook Debug');
  console.log('Stable ID:', window.GB_STABLE_USER_ID);
  console.log('Current ID:', gb?.getAttributes()?.id);
  console.log('Match:', gb?.getAttributes()?.id === window.GB_STABLE_USER_ID ? '‚úÖ' : '‚ùå');
  
  if (window.GB_EXECUTION.evaluations) {
    console.group('Experiments');
    Object.entries(window.GB_EXECUTION.evaluations).forEach(([id, data]) => {
      const status = data.included ? '‚úÖ' : '‚è≠Ô∏è';
      const executed = window.GB_EXECUTION.executed.has(id) ? 'üöÄ' : '';
      console.log(`${status} ${id}: Var ${data.variation}, Bucket ${data.bucket?.toFixed(4)} ${executed}`);
    });
    console.groupEnd();
  }
  
  console.log('Attributes:', gb?.getAttributes());
  console.groupEnd();
  
  return {
    stableId: window.GB_STABLE_USER_ID,
    currentId: gb?.getAttributes()?.id,
    evaluations: window.GB_EXECUTION.evaluations
  };
};

window.gbTestBucket = function(experimentId) {
  const gb = window.gb || window._growthbook;
  const key = experimentId.startsWith('exp-') ? experimentId : `exp-${experimentId}`;
  const result = gb?.evalFeature(key);
  
  console.log(`${experimentId}:`, {
    included: result?.experimentResult?.inExperiment,
    variation: result?.experimentResult?.variationId,  
    bucket: result?.experimentResult?.bucket
  });
  
  return result?.experimentResult?.bucket;
};
</script>