<!-- ============================ -->
<!-- GrowthBook + Shopify Manual SDK Integration -->
<!-- ============================ -->

<!-- Anti-flicker styles -->
<style>
  [data-gb-gate] {
    visibility: hidden;
    transition: visibility 0.2s ease-in-out;
  }
  .gb-ready [data-gb-gate] {
    visibility: visible;
  }
  .gb-timeout [data-gb-gate] {
    visibility: visible;
  }
</style>

<!-- Load GrowthBook SDK (not auto-bundle) -->
<script src="https://cdn.jsdelivr.net/npm/@growthbook/growthbook/dist/bundles/index.min.js"></script>

<script>
// ===== CONFIGURATION =====
const GB_CONFIG = {
  CLIENT_KEY: "sdk-Knbwv55oDrfYDuq",
  API_HOST: "https://cdn.growthbook.io",
  DEBUG: true // Set to false in production
};

// ===== STABLE ID MANAGEMENT =====
function getStableUserId() {
  const STORAGE_KEY = 'gb_stable_user_id';
  let userId = localStorage.getItem(STORAGE_KEY);
  
  if (!userId) {
    // Create a new stable ID
    userId = `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    localStorage.setItem(STORAGE_KEY, userId);
    console.log('[GB] Created new stable user ID:', userId);
  } else {
    console.log('[GB] Using existing stable user ID:', userId);
  }
  
  return userId;
}

// ===== INITIALIZE GROWTHBOOK =====
(async function initializeGrowthBook() {
  try {
    // Get stable user ID
    const stableUserId = getStableUserId();
    
    // Create GrowthBook instance with manual control
    const gb = new window.GrowthBook.GrowthBook({
      apiHost: GB_CONFIG.API_HOST,
      clientKey: GB_CONFIG.CLIENT_KEY,
      enableDevMode: GB_CONFIG.DEBUG,
      
      // Set attributes with stable ID
      attributes: {
        id: stableUserId, // This is the critical part
        
        // Shopify specific
        customerId: window.ShopifyAnalytics?.meta?.page?.customerId || null,
        pageType: window.ShopifyAnalytics?.meta?.page?.pageType || 'unknown',
        isStaff: !!(window.Shopify?.designMode),
        
        // Device info
        deviceType: /Mobile|Android|iPhone|iPad/i.test(navigator.userAgent) ? 'mobile' : 'desktop',
        browser: (function() {
          const ua = navigator.userAgent;
          if (ua.includes('Chrome')) return 'chrome';
          if (ua.includes('Safari') && !ua.includes('Chrome')) return 'safari';
          if (ua.includes('Firefox')) return 'firefox';
          if (ua.includes('Edge')) return 'edge';
          return 'other';
        })(),
        
        // Page info
        url: location.href,
        path: location.pathname,
        domain: location.hostname
      },
      
      // Tracking callback
      trackingCallback: (experiment, result) => {
        if (GB_CONFIG.DEBUG) {
          console.log('[GB] Experiment viewed:', {
            experiment: experiment.key,
            variation: result.key,
            variationId: result.variationId
          });
        }
        
        // Google Analytics
        if (window.dataLayer) {
          window.dataLayer.push({
            event: 'gb_experiment_viewed',
            experimentId: experiment.key,
            variationId: result.key
          });
        }
        
        // Shopify Analytics
        if (window.Shopify?.analytics?.track) {
          window.Shopify.analytics.track('Experiment Viewed', {
            experimentId: experiment.key,
            variationId: result.key
          });
        }
      }
    });
    
    // Load features from API
    await gb.loadFeatures({ timeout: 3000 });
    
    // Make globally available
    window.gb = gb;
    window.growthbook = gb;
    
    console.log('[GB] Initialized with stable ID:', gb.getAttributes().id);
    
    // ===== EXPERIMENT EXECUTOR =====
    const ExperimentExecutor = {
      executedExperiments: new Set(),
      
      // Safe attribute updater
      updateAttributes(newAttrs) {
        const currentAttrs = gb.getAttributes();
        // Always preserve the stable ID
        gb.setAttributes({
          ...currentAttrs,
          ...newAttrs,
          id: stableUserId // Never change this
        });
      },
      
      // Execute experiment code
      executeJavaScript(code, experimentId) {
        if (!code || this.executedExperiments.has(experimentId)) return;
        
        try {
          new Function(code)();
          this.executedExperiments.add(experimentId);
          if (GB_CONFIG.DEBUG) {
            console.log('[GB] Executed:', experimentId);
          }
        } catch (error) {
          console.error('[GB] Execution failed:', experimentId, error);
        }
      },
      
      // Run all experiments
      runExperiments() {
        const features = gb.getFeatures();
        const experiments = Object.keys(features).filter(k => k.startsWith('exp-'));
        
        experiments.forEach(key => {
          const result = gb.evalFeature(key);
          if (result?.value?.trim()) {
            this.executeJavaScript(result.value, key);
          }
        });
        
        document.documentElement.classList.add('gb-ready');
        
        // Store debug info
        if (GB_CONFIG.DEBUG) {
          const assignments = {};
          experiments.forEach(key => {
            const result = gb.evalFeature(key);
            const cleanId = key.replace(/^exp-/, '');
            assignments[cleanId] = {
              included: result?.experimentResult?.inExperiment || false,
              variationId: result?.experimentResult?.variationId ?? null,
              bucket: result?.experimentResult?.bucket ?? null,
              hashUsed: result?.experimentResult?.hashUsed ?? null
            };
          });
          window.gbAssignments = assignments;
          console.log('[GB] Experiment assignments:', assignments);
        }
      }
    };
    
    // Run experiments
    ExperimentExecutor.runExperiments();
    
    // Handle Shopify events
    document.addEventListener('cart:updated', () => {
      ExperimentExecutor.updateAttributes({
        cartUpdated: Date.now(),
        cartItemCount: window.Shopify?.cart?.item_count || 0
      });
    });
    
    document.addEventListener('shopify:section:load', () => {
      ExperimentExecutor.executedExperiments.clear();
      ExperimentExecutor.runExperiments();
    });
    
    // Store executor globally
    window.GBExecutor = ExperimentExecutor;
    
  } catch (error) {
    console.error('[GB] Failed to initialize:', error);
    document.documentElement.classList.add('gb-timeout');
  }
})();

// ===== DEBUG UTILITIES =====
window.gbDebug = function() {
  const gb = window.gb || window.growthbook;
  if (!gb) {
    console.log('GrowthBook not loaded');
    return null;
  }
  
  const stableId = localStorage.getItem('gb_stable_user_id');
  const currentId = gb.getAttributes()?.id;
  
  console.group('🔬 GrowthBook Debug');
  console.log('Stable ID (localStorage):', stableId);
  console.log('Current ID (GB):', currentId);
  console.log('IDs Match:', currentId === stableId ? '✅ YES' : '❌ NO');
  console.log('All Attributes:', gb.getAttributes());
  console.log('Assignments:', window.gbAssignments);
  console.groupEnd();
  
  return {
    stable: stableId,
    current: currentId,
    match: currentId === stableId
  };
};

// Test bucket stability
window.gbTestStability = function() {
  const gb = window.gb || window.growthbook;
  if (!gb) {
    console.log('GrowthBook not loaded');
    return;
  }
  
  const experiments = ['exp-EXP880657', 'exp-EXP880921'];
  console.group('🧪 Bucket Stability Test');
  
  experiments.forEach(exp => {
    const result = gb.evalFeature(exp);
    console.log(`${exp}:`, {
      bucket: result?.experimentResult?.bucket,
      variant: result?.experimentResult?.variationId,
      included: result?.experimentResult?.inExperiment
    });
  });
  
  console.log('User ID:', gb.getAttributes().id);
  console.groupEnd();
};

// Auto-monitor in debug mode
if (GB_CONFIG.DEBUG) {
  setInterval(() => {
    const gb = window.gb || window.growthbook;
    if (gb) {
      const stableId = localStorage.getItem('gb_stable_user_id');
      const currentId = gb.getAttributes()?.id;
      
      if (currentId !== stableId) {
        console.error('🚨 ID MISMATCH DETECTED!', {
          expected: stableId,
          current: currentId
        });
      }
    }
  }, 5000);
}
</script>