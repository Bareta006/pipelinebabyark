{% comment %}
  Add this code to your Shopify product page template (e.g., product.liquid or product.json) where you want the script to be rendered.
{% endcomment %}

<script type="application/json" id="delivery-info">
  {
    "product": {
      "id": {{ product.id }},
      "title": "{{ product.title | escape }}",
      "delivery_time": "{{ product.metafields.delivery.delivery_time | escape }}",
      "estimated_date": "{{ product.metafields.delivery.estimated_date | escape }}"
    },
    "variants": [
      {% assign valid_variants = false %}
      {% for variant in product.variants %}
        {% if variant.metafields.delivery.delivery_estimated_date != blank %}
          {% if valid_variants %},{% endif %}
          {% assign valid_variants = true %}
          {
            "id": {{ variant.id }},
            "title": "{{ variant.title | escape }}",
            "delivery_estimated_date": "{{ variant.metafields.delivery.delivery_estimated_date | escape }}"
          }
        {% endif %}
      {% endfor %}
    ]
  }
</script>



<script>
 document.addEventListener("DOMContentLoaded", () => {
    // Fetch JSON data from the script tag
    const deliveryInfoElement = document.getElementById("delivery-info");
    if (!deliveryInfoElement) {
        console.log("Delivery info JSON not found.");
        return;
    }

    let deliveryInfo;
    try {
        deliveryInfo = JSON.parse(deliveryInfoElement.textContent);
        console.log("Full delivery info JSON:", deliveryInfo);
    } catch (error) {
        console.log("Error parsing delivery info JSON:", error);
        return;
    }

    // Store the original content of the estimate section BEFORE any updates
    const estimateContentElement = document.querySelector(".delivery-info > p > strong");
    if (!estimateContentElement) {
        console.log("Estimate content element not found.");
        return;
    }

    // Use a const to ensure the original text is immutable and stored only once
    if (typeof window.OriginalEstimateText === "undefined") {
        window.OriginalEstimateText = estimateContentElement.textContent.trim(); // Store in a global variable
        console.log("Original estimate text captured:", window.OriginalEstimateText);
    }

    const originalText = window.OriginalEstimateText; // Use the globally stored text

    // Function to get current variant ID (simple approach)
    function getCurrentVariantId() {
        const variantInput = document.querySelector('input[name="id"]');
        if (variantInput && variantInput.value) {
            return parseInt(variantInput.value, 10);
        }
        
        // Fallback to URL if form input is empty/wrong
        const urlParams = new URLSearchParams(window.location.search);
        const urlVariantId = urlParams.get('variant');
        if (urlVariantId) {
            // Update form to match URL
            if (variantInput) {
                variantInput.value = urlVariantId;
            }
            return parseInt(urlVariantId, 10);
        }
        
        return null;
    }

    // Function to update the hidden input fields
    function updateHiddenInputs() {
        const variantId = getCurrentVariantId();
        if (!variantId) {
            console.log("No variant ID found.");
            return;
        }

        const variantData = deliveryInfo.variants.find(variant => variant.id === variantId);

        const deliveryTimeInput = document.querySelector('input[name="deliveryTime"]');
        const deliveryDateInput = document.querySelector('input[name="deliveryDate"]');

        if (!deliveryTimeInput && !deliveryDateInput) {
            console.log("Delivery input fields not found.");
            return;
        }

        // Clear input values before updating
        if (deliveryTimeInput) deliveryTimeInput.value = "";
        if (deliveryDateInput) deliveryDateInput.value = "";

        // Simple priority: variant first, then product
        if (variantData && variantData.delivery_estimated_date) {
            // Use variant-specific delivery date
            console.log("Using variant delivery date:", variantData.delivery_estimated_date);
            const estimatedDate = variantData.delivery_estimated_date;
            
            if (deliveryTimeInput) {
                deliveryTimeInput.name = "deliveryDate";
                deliveryTimeInput.value = estimatedDate;
            }
            if (deliveryDateInput) {
                deliveryDateInput.name = "deliveryDate";
                deliveryDateInput.value = estimatedDate;
            }
        } else if (deliveryInfo.product.delivery_time) {
            // Use product delivery time
            console.log("Using product delivery time:", deliveryInfo.product.delivery_time);
            if (deliveryTimeInput) {
                deliveryTimeInput.name = "deliveryTime";
                deliveryTimeInput.value = deliveryInfo.product.delivery_time;
            }
            if (deliveryDateInput) {
                deliveryDateInput.name = "deliveryTime";
                deliveryDateInput.value = deliveryInfo.product.delivery_time;
            }
        } else if (deliveryInfo.product.estimated_date) {
            // Use product estimated date
            console.log("Using product estimated date:", deliveryInfo.product.estimated_date);
            const estimatedDate = deliveryInfo.product.estimated_date;
            
            if (deliveryTimeInput) {
                deliveryTimeInput.name = "deliveryDate";
                deliveryTimeInput.value = estimatedDate;
            }
            if (deliveryDateInput) {
                deliveryDateInput.name = "deliveryDate";
                deliveryDateInput.value = estimatedDate;
            }
        } else {
            console.log("No delivery info available.");
        }
    }

    // Function to update the estimated delivery text
    function updateEstimatedText() {
        const variantId = getCurrentVariantId();
        if (!variantId) return;

        const variantData = deliveryInfo.variants.find(variant => variant.id === variantId);

        if (variantData && variantData.delivery_estimated_date) {
            // Use variant-specific date
            estimateContentElement.textContent = variantData.delivery_estimated_date;
        } else {
            // Use original product text
            estimateContentElement.textContent = originalText;
        }
    }

    // Initial updates
    updateHiddenInputs();
    updateEstimatedText();

    // Listen for variant changes
    const variantInput = document.querySelector('input[name="id"]');
    if (variantInput) {
        variantInput.addEventListener("change", () => {
            updateHiddenInputs();
            updateEstimatedText();
        });
    }

    // Listen for variant selector changes (covers most Shopify themes)
    document.addEventListener('change', (e) => {
        if (e.target.name && e.target.name.includes('option')) {
            setTimeout(() => {
                updateHiddenInputs();
                updateEstimatedText();
            }, 50);
        }
    });
});

</script>