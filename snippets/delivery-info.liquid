{% comment %}
  Add this code to your Shopify product page template (e.g., product.liquid or product.json) where you want the script to be rendered.
{% endcomment %}

<script type="application/json" id="delivery-info">
  {
    "product": {
      "id": {{ product.id }},
      "title": "{{ product.title | escape }}",
      "delivery_time": "{{ product.metafields.delivery.delivery_time | escape }}",
      "estimated_date": "{{ product.metafields.delivery.estimated_date | escape }}"
    },
    "variants": [
      {% assign valid_variants = false %}
      {% for variant in product.variants %}
        {% if variant.metafields.delivery.delivery_estimated_date != blank %}
          {% if valid_variants %},{% endif %}
          {% assign valid_variants = true %}
          {
            "id": {{ variant.id }},
            "title": "{{ variant.title | escape }}",
            "delivery_estimated_date": "{{ variant.metafields.delivery.delivery_estimated_date | escape }}"
          }
        {% endif %}
      {% endfor %}
    ]
  }
</script>



<script>
 document.addEventListener("DOMContentLoaded", () => {
    // Fetch JSON data from the script tag
    const deliveryInfoElement = document.getElementById("delivery-info");
    if (!deliveryInfoElement) {
        console.log("Delivery info JSON not found.");
        return;
    }

    let deliveryInfo;
    try {
        deliveryInfo = JSON.parse(deliveryInfoElement.textContent);
    } catch (error) {
        console.log("Error parsing delivery info JSON:", error);
        return;
    }

    // Store the original content of the estimate section BEFORE any updates
    const estimateContentElement = document.querySelector(".delivery-info > p > strong");
    if (!estimateContentElement) {
        console.log("Estimate content element not found.");
        return;
    }

    // Use a const to ensure the original text is immutable and stored only once
    if (typeof window.OriginalEstimateText === "undefined") {
        window.OriginalEstimateText = estimateContentElement.textContent.trim(); // Store in a global variable
        console.log("Original estimate text captured:", window.OriginalEstimateText);
    }

    const originalText = window.OriginalEstimateText; // Use the globally stored text

    // Function to update the hidden input fields
    function updateHiddenInputs() {
        const variantInput = document.querySelector('input[name="id"]');
        if (!variantInput) {
            console.log("Variant input not found.");
            return;
        }

        const variantId = parseInt(variantInput.value, 10);
        const variantData = deliveryInfo.variants.find(variant => variant.id === variantId);

        const deliveryTimeInput = document.querySelector('input[name="deliveryTime"]');
        const deliveryDateInput = document.querySelector('input[name="deliveryDate"]');

        if (!deliveryTimeInput && !deliveryDateInput) {
            console.log("Delivery input fields not found.");
            return;
        }

        // Clear input values before updating
        if (deliveryTimeInput) deliveryTimeInput.value = "";
        if (deliveryDateInput) deliveryDateInput.value = "";

        // Priority logic: variant-specific data takes precedence over product-level data
        if (variantData && variantData.delivery_estimated_date) {
            // Use variant-specific delivery estimated date (highest priority)
            const estimatedDate = variantData.delivery_estimated_date;
            
            if (deliveryTimeInput && deliveryTimeInput.name !== "deliveryDate") {
                deliveryTimeInput.name = "deliveryDate";
                setTimeout(() => {
                    deliveryTimeInput.value = estimatedDate;
                }, 50);
            } else if (deliveryTimeInput) {
                deliveryTimeInput.value = estimatedDate;
            }
            
            if (deliveryDateInput && deliveryDateInput.name === "deliveryDate") {
                deliveryDateInput.value = estimatedDate;
            } else if (deliveryDateInput) {
                deliveryDateInput.name = "deliveryDate";
                setTimeout(() => {
                    deliveryDateInput.value = estimatedDate;
                }, 50);
            }
        } else if (deliveryInfo.product.delivery_time) {
            // Use product-level delivery time
            if (deliveryDateInput && deliveryDateInput.name !== "deliveryTime") {
                deliveryDateInput.name = "deliveryTime";
                setTimeout(() => {
                    deliveryDateInput.value = deliveryInfo.product.delivery_time;
                }, 50);
            } else if (deliveryDateInput) {
                deliveryDateInput.value = deliveryInfo.product.delivery_time;
            }
            
            if (deliveryTimeInput && deliveryTimeInput.name === "deliveryTime") {
                deliveryTimeInput.value = deliveryInfo.product.delivery_time;
            } else if (deliveryTimeInput) {
                deliveryTimeInput.name = "deliveryTime";
                setTimeout(() => {
                    deliveryTimeInput.value = deliveryInfo.product.delivery_time;
                }, 50);
            }
        } else if (deliveryInfo.product.estimated_date) {
            // Use product-level estimated date
            const estimatedDate = deliveryInfo.product.estimated_date;
            
            if (deliveryTimeInput && deliveryTimeInput.name !== "deliveryDate") {
                deliveryTimeInput.name = "deliveryDate";
                setTimeout(() => {
                    deliveryTimeInput.value = estimatedDate;
                }, 50);
            } else if (deliveryTimeInput) {
                deliveryTimeInput.value = estimatedDate;
            }
            
            if (deliveryDateInput && deliveryDateInput.name === "deliveryDate") {
                deliveryDateInput.value = estimatedDate;
            } else if (deliveryDateInput) {
                deliveryDateInput.name = "deliveryDate";
                setTimeout(() => {
                    deliveryDateInput.value = estimatedDate;
                }, 50);
            }
        } else {
            console.log("No delivery info available for this variant or product.");
        }
    }

    // Function to update the estimated delivery text
    function updateEstimatedText() {
        const variantInput = document.querySelector('input[name="id"]');
        if (!variantInput) {
            console.log("Variant input not found.");
            return;
        }

        const variantId = parseInt(variantInput.value, 10);
        const variantData = deliveryInfo.variants.find(variant => variant.id === variantId);

        if (variantData && variantData.delivery_estimated_date) {
            // Update to variant-specific estimated date
            estimateContentElement.textContent = variantData.delivery_estimated_date;
        } else {
            // Fallback to the original product text
            estimateContentElement.textContent = originalText;
        }
    }

    // Initial updates for hidden inputs and estimate text
    updateHiddenInputs();
    updateEstimatedText();

    // Update on variant change
    const variantInput = document.querySelector('input[name="id"]');
    if (variantInput) {
        variantInput.addEventListener("change", () => {
            updateHiddenInputs();
            updateEstimatedText();
        });
    }
});

</script>