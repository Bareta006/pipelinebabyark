{% comment %}
  Add this code to your Shopify product page template (e.g., product.liquid or product.json) where you want the script to be rendered.
{% endcomment %}

<script type="application/json" id="delivery-info">
  {
    "product": {
      "id": {{ product.id }},
      "title": "{{ product.title | escape }}",
      "delivery_time": "{{ product.metafields.delivery.delivery_time | escape }}",
      "estimated_date": "{{ product.metafields.delivery.estimated_date | escape }}"
    },
    "variants": [
      {% assign valid_variants = false %}
      {% for variant in product.variants %}
        {% if variant.metafields.delivery.delivery_estimated_date != blank %}
          {% if valid_variants %},{% endif %}
          {% assign valid_variants = true %}
          {
            "id": {{ variant.id }},
            "title": "{{ variant.title | escape }}",
            "delivery_estimated_date": "{{ variant.metafields.delivery.delivery_estimated_date | escape }}"
          }
        {% endif %}
      {% endfor %}
    ]
  }
</script>



<script>
 document.addEventListener("DOMContentLoaded", () => {
    // Fetch JSON data from the script tag
    const deliveryInfoElement = document.getElementById("delivery-info");
    if (!deliveryInfoElement) {
        console.log("Delivery info JSON not found.");
        return;
    }

    let deliveryInfo;
    try {
        deliveryInfo = JSON.parse(deliveryInfoElement.textContent);
    } catch (error) {
        console.log("Error parsing delivery info JSON:", error);
        return;
    }

    // Store the original content of the estimate section BEFORE any updates
    const estimateContentElement = document.querySelector(".delivery-info p > strong");
    if (!estimateContentElement) {
        console.log("Estimate content element not found.");
        return;
    }

    // Use a const to ensure the original text is immutable and stored only once
    if (typeof window.OriginalEstimateText === "undefined") {
        window.OriginalEstimateText = estimateContentElement.textContent.trim(); // Store in a global variable
        console.log("Original estimate text captured:", window.OriginalEstimateText);
    }

    const originalText = window.OriginalEstimateText; // Use the globally stored text

    // Function to update the hidden input fields
    function updateHiddenInputs() {
        // Add a small delay to ensure DOM is updated with the latest variant
        setTimeout(() => {
            const variantInput = document.querySelector('input[name="id"]');
            if (!variantInput) {
                console.log("Variant input not found.");
                return;
            }

            const variantId = parseInt(variantInput.value, 10);
            if (isNaN(variantId)) {
                console.log("Invalid variant ID:", variantInput.value);
                return;
            }

            const variantData = deliveryInfo.variants.find(variant => variant.id === variantId);

            // Determine which data to use (variant-specific or general product)
            const deliveryData = variantData || deliveryInfo.product;

            const deliveryTimeInput = document.querySelector('input[name="deliveryTime"]') || document.querySelector('input[data-name="deliveryTime"]');
            const deliveryDateInput = document.querySelector('input[name="deliveryDate"]') || document.querySelector('input[data-name="deliveryDate"]');

            // Create inputs if they don't exist
            if (!deliveryTimeInput && !deliveryDateInput) {
                console.log("Creating delivery input fields as they were not found.");
                
                // Create hidden inputs and append to the form
                const form = document.querySelector('form[action*="/cart/add"]');
                if (!form) {
                    console.log("Add to cart form not found.");
                    return;
                }
                
                const timeInput = document.createElement('input');
                timeInput.type = 'hidden';
                timeInput.dataset.name = 'deliveryTime';
                form.appendChild(timeInput);
                
                const dateInput = document.createElement('input');
                dateInput.type = 'hidden';
                dateInput.dataset.name = 'deliveryDate';
                form.appendChild(dateInput);
                
                // Re-run the function now that we've created the inputs
                setTimeout(updateHiddenInputs, 10);
                return;
            }

            // Determine which type of delivery info we have
            const hasDeliveryTime = !!deliveryData.delivery_time;
            const hasEstimatedDate = !!(deliveryData.estimated_date || deliveryData.delivery_estimated_date);
            
            if (hasDeliveryTime) {
                // Set up for deliveryTime
                const deliveryTimeValue = deliveryData.delivery_time;
                
                // First set the new value before changing names to avoid empty submissions
                if (deliveryTimeInput) {
                    deliveryTimeInput.value = deliveryTimeValue;
                    deliveryTimeInput.name = "deliveryTime";
                    deliveryTimeInput.removeAttribute('data-name');
                }
                
                if (deliveryDateInput) {
                    // Remove the name attribute but keep the input in the DOM
                    deliveryDateInput.removeAttribute('name');
                    deliveryDateInput.dataset.name = "deliveryDate";
                    deliveryDateInput.value = ""; // Clear the value as it's not being used
                }
                
                console.log("Set delivery time:", deliveryTimeValue);
            } else if (hasEstimatedDate) {
                // Set up for deliveryDate
                const estimatedDate = deliveryData.estimated_date || deliveryData.delivery_estimated_date;
                
                // First set the new value before changing names to avoid empty submissions
                if (deliveryDateInput) {
                    deliveryDateInput.value = estimatedDate;
                    deliveryDateInput.name = "deliveryDate";
                    deliveryDateInput.removeAttribute('data-name');
                }
                
                if (deliveryTimeInput) {
                    // Remove the name attribute but keep the input in the DOM
                    deliveryTimeInput.removeAttribute('name');
                    deliveryTimeInput.dataset.name = "deliveryTime";
                    deliveryTimeInput.value = ""; // Clear the value as it's not being used
                }
                
                console.log("Set delivery date:", estimatedDate);
            } else {
                console.log("No delivery info available for this variant or product.");
                
                // Make sure both inputs are inactive but preserved in the DOM
                if (deliveryTimeInput) {
                    deliveryTimeInput.removeAttribute('name');
                    deliveryTimeInput.dataset.name = "deliveryTime";
                    deliveryTimeInput.value = "";
                }
                
                if (deliveryDateInput) {
                    deliveryDateInput.removeAttribute('name');
                    deliveryDateInput.dataset.name = "deliveryDate";
                    deliveryDateInput.value = "";
                }
            }
            
            console.log("Updated hidden inputs for variant ID:", variantId);
        }, 100); // 100ms delay to ensure DOM is updated
    }

    // Function to update the estimated delivery text
    function updateEstimatedText() {
        setTimeout(() => {
            const variantInput = document.querySelector('input[name="id"]');
            if (!variantInput) {
                console.log("Variant input not found.");
                return;
            }

            const variantId = parseInt(variantInput.value, 10);
            if (isNaN(variantId)) {
                console.log("Invalid variant ID:", variantInput.value);
                return;
            }

            const variantData = deliveryInfo.variants.find(variant => variant.id === variantId);

            if (variantData && variantData.delivery_estimated_date) {
                // Update to variant-specific estimated date
                estimateContentElement.textContent = variantData.delivery_estimated_date;
            } else {
                // Fallback to the original product text
                estimateContentElement.textContent = originalText;
            }
            
            console.log("Updated estimated text for variant ID:", variantId);
        }, 100); // 100ms delay to ensure DOM is updated
    }

    // Initial updates for hidden inputs and estimate text
    updateHiddenInputs();
    updateEstimatedText();

    // Update on variant change
    const variantInput = document.querySelector('input[name="id"]');
    if (variantInput) {
        // Use both change and input events to catch all possible variant changes
        variantInput.addEventListener("change", () => {
            updateHiddenInputs();
            updateEstimatedText();
        });
        
        // Some themes might use input event instead of change
        variantInput.addEventListener("input", () => {
            updateHiddenInputs();
            updateEstimatedText();
        });
        
        // Also listen for custom events that might be triggered by the theme
        document.addEventListener("variant:change", () => {
            updateHiddenInputs();
            updateEstimatedText();
        });
        
        document.addEventListener("variant:updated", () => {
            updateHiddenInputs();
            updateEstimatedText();
        });
    }
});

</script>